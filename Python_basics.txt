Tuples
------
Python tuples are immutable i.e you can not change the elements of a tuple in place
Tuples are formed by placing a comma-separated tuple of expression in parenthesis.

Creating and Accessing Tuples
----------------------------
()                   #Empty tuple
(1,2,3)              #tuple of integers
(1, 2.5, 3.7,9)      #tuple of numbers(integers and floating point)
('a', 'b', 'c')      #tuple of characters


Creating Tuples
---------------
Empty tuple
T= ()  

Single element Tuple
t = (1) ---->wrong just a integer expression, not a tuple

t = (1,)
or
t = 1,

Creating tuples from existing Sequences
---------------------------------------
T = tuple(<sequence>)
where <sequence> can be any kind of sequence object including strings, lists and tuples.

t1 = tuple("hello")
L = ['w', 'e', 'r', 't', 'y']
t2 = tuple(L)

t1 = tuple(input("Enter tuple elements:))
or
t1 = tuple(map(int, input().split()))
or 
t1 = eval(input("Enter tuple to be added:"))
Enter tuple to be added:(2,4,'a',[3,4])

Accessing Tuples
-----------------
Other than accessing items, you can do all that you can do with lists

How tuples are internally organized
-----------------------------------
Tuples are stored in memory exactly like strings, except that because some of their objects are larger than others, they store a reference at each index instead of single character as in strings.
Each of the individual items of the tuple are stored somewhere else in memory.

Tuples are similar to lists in following ways:
----------------------------------------------
length function -len()
Indexing and slicing
Membership operators --> in and not in
Concatenation and Replication operators(* and +)

The individual elements areaccessed through their indexes given in square brackets.

>>> a = ('a', 'e', 'i', 'o', 'u') length of string=5
>>> a[-2]
'o'
>>> a[-2+5]

Tuple operations
----------------
1. Joining tuples

>>> tp1 = (1,3,5)
>>> tp2 = (6,7,8)
>>> tp1 + tp2
(1, 3, 5, 6, 7, 8)

tuple + number          ---->wrong
tuple + complex -number ---->wrong
tuple + string          ---->wrong
tuple + (3)             ---->wrong  

tuple + (3,)            ---->right

Slicing the tuples
------------------
tp1 = (10, 12, 14, 20, 22, 24, 30, 32, 34)
>>> tp1[3:30]  ----->Giving upper limit way beyond the size of the tuple, but python return elements from tuple falling in range 3
(20, 22, 24, 30, 32, 34)  

>>>tp1[-15:7]   ----->Giving lower limit much lower, but python retuirns elements from tuple falling in range -15 onwards < 7
(10, 12, 14, 20, 22, 24, 30)

Unpacking Tuples
----------------
Creating a tuple from a set of values is called packing and its reverse i.e creating individual values from a tuple's elements is called unpacking.

(10, 12, 14, 20, 22, 24, 30)
>>> t = (1, 2, 'A', 'B')
>>> w,x,y,z = t
>>> w
1
>>> x
2
>>> y
'A'
>>> z
'B'
>>> 

w,x,y = t
ValueError: too many values to unpack (expected 3)

w,x,y,a,b = t
ValueError: not enough values to unpack (expected 5, got 4)

Tuple Function and Methods
--------------------------
len()
min()
max()

tp13 = ('1',1,2,"Rustom",(1,2),[1,2])
min and max won't work for this statement
TypeError: '>' not supported between instances of 'int' and 'str'

but this feature(Comparing objects of different types is leagl) and supported in 
Python 2
lists<strings<tuples

cmp() method not supported in python 3.x

tuple(<sequence>)
This method is a constructor method that can be used to create tuples from different types of values.

Tuples can be nested
a = (1,2,3)
a[1:1] -- returns empty tuple

A slice operator returns a part of the tuple.It need not return a new tuple always and can return the original tuple using t[:]


Dictionaries
------------
Dictionaries are mutable, unordered collections with elements in the form of a key:value pairs that associate keys to values.
keys of dictionary must be of immutable types
*python string
*a number
*a tuple

Accessing Elements of a dictionary
<dictionary-name>[<key>]

Using for loop we can traverse the dictionary


Accessing keys or Values Simultaneously
---------------------------------------
>>> d
{'1': 'one', '2': 'two', '3': 'three'}
>>> d.keys()
dict_keys(['1', '2', '3'])
>>> d.values()
dict_values(['one', 'two', 'three'])

Characteristics of a dictionary
---------------------------------
1.Unordered set
2.Not a sequence
3.Indexed by keys, not numbers
4.keys must be unique
5.mutable
<dictionary>[<key>] = <value>
6.Internally stored as mappings
Internally, the key:value pairs of a dictionary are associated with one another with some internal function(called hash-function).This way of linking is called mapping.

Ways to create Dictionary
-------------------------
d = {}
or
d = dict()

Updating Existing elements in a Dictionary
------------------------------------------
<dictionary>[<key>] = <value>

But make sure that the key must exist in the dictionary otherwise new entry will be added to the dictionary

Deleting Elements from a dictionary
-----------------------------------
del <dictionary>[<key>]

<dictionary>.pop(<key>)

If you try to delete a key which does not exist, the Python returns error in both the cases but pop() method allows you to specify what to display when given doesnot exist, rather than the defaault error message.

>>> d.pop('3',"Not found")
'Not found'
>>> 

Checking for the existence of the key
-------------------------------------
key in dictionary
key not in dictionary

Dictionary functions and methods
---------------------------------
len()
clear()
>>> d = {'1':'one', '2':'two','3':'three'}
>>> d.clear()
>>> d

d.get('1')
>>>'one'
d.get('5')-- won't raise any error if key doesn't exist
can define error message
d.get('5',"Error!! key not found")

has_key() is deprecated in python 3

items() - returns all of the items in the dictionary as a sequence of (key, value) tuples.

keys()
values()

update(): This method merges key:value pairs from the new dictionary into the original dictionary, adding pr replacing as needed.

cmp()- deprecated in python 3
---------------------------------

The python lists are containers that are used to store a list of values of any type.
lists are mutable
[]
[1,2,3]
[1, 2.5, 3.7, 9]
['a', 'b', 'c']

Creating list
-------------
L = list()
L = list(<sequence>)

l1 = list(input('Enter list elements: '))
Enter list elements: 234567
['2', '3', '4', '5', '6', '7']

list = eval(input("Enter list to be added: "))
Enter list to be added: [67, 78, 46, 23]
[67, 78, 46, 23]

Accessing lists
----------------
Lists are stored in memory exactly like strings, except that  because some of their
objects are larger than others, they store a reference at each index instead of single character as in strings.

Each of the individual items of the list are stored somewhere else in memory.

len(L)
Indexing and Slicing
Memebership operators -'in' and 'not in'

Concatenation  and replication operators + and *

List Operations
----------------
>>> lst1 = [1, 3, 5]
		 
>>> lst2 = [6, 7, 8]
		 
>>> lst1 + lst2
		 
[1, 3, 5, 6, 7, 8]

list + number --> Error
list + complex-number --> Error
list + string  --> Error

Repeating or Replicating lists
>>> lst1 * 3
		 
[1, 3, 5, 1, 3, 5, 1, 3, 5]

Slicing the lists
seq = L[start:stop]
seq = L[start:stop:step]

Working with Lists
-------------------
L.append(item)

L[index] = <new value> --->Updating Elements to a list

Deleting Elements from a list

del List[<index>]
del List[<start>:<stop>]

pop() --> method removes an individual item and returns it.

List.pop(<index>) # index optional; if skipped, last element is deleted.

The pop() method is useful only when you want to store the element being deleting for later use.
The pop() method raises an exception(runtime error) if the list is already empty.

Making True Copy of a List
---------------------------
a = [1, 2, 3]
b = a

>>> a = [1, 2, 3]		 
>>> b = a		 
>>> a[1] = 5		 
>>> a		 
[1, 5, 3]
>>> b		 
[1, 5, 3]
>>> 

---
>>> a = [1, 2, 3]
>>> b = list(a)
>>> a[1] = 5
>>> a
[1, 5, 3]
>>> b
[1, 2, 3]
>>> 

-------------------
List Functions and Methods

List.append(<item>)
List.extend(<list>)

t2.extend(10) ---> Error

List.insert(<pos>, <item>) --> Takes two arguments and retiurns  no value
list.insert(0, x) --> will insert element x at the fron t of the list i.e at index 0
list.insert(len(a), x)--> at the end of the list.
list.pop()
list.remove(<value>)--> Takes one essential argument and does not return anything.
The remove() will report an error if there is no such item in the list.
list.reverse()--> Takes no argument, returns no list, reverse the list 'in place'
list.sort() function sorts the items of the list, by default in increasing order.
This is done 'in place'. It doesnot create a new list

List.sort()
List.sort(reverse=True)

String Manipulation
-------------------
single quotation marks
double quotation marks
triple quotation marks

The index(also called subscript) is the numbered position of a letter in the string.
In Python, indices begin 0 onwards in the forward direction and -1, -2, ... in the 
backward direction.

Traversing refer to iterating through the elements of a sting, one character at a time.

Basic operators
String Concatenation operator +
String Replication operator *
"2" * 3 ---> valid
"2" * "3" --->invalid

Membership operator
"in"
"not in"

ord() that takes a single character and returns the corresponding ASCII value or unicode value
>>> ord('a')
97

chr() returns the character corresponding to that ASCII value.
>>> chr(98)
'b'

String Functions
-----------------
string.capitalize()

string.find(sub[, start[, end]])---->
Returns the lowest index in the string where the substring sub is found within the slice range of start and end, returns -1 if sub is not found.

>>> string = 'it goes as - ringa ringa roses'
>>> sub = 'ringa'
>>> string.find(sub)
13
>>> string.find(sub, 15, 22)
-1
>>> string.find(sub, 15, 25)
19
>>> 

string.isalnum()
string.isalpha()
string.isdigit()
string.islower()
string.isspace()---> Returns True if there are only whitespace characters in the string.There must be at least one character.It returns False otherwise.

>>> string1 = "    "
>>> string2 = ""
>>> string1.isspace()
True
>>> string2.isspace()
False

string.isupper()
string.lower()
string.upper()

string.lstrip([chars])
Returns a copy of the string with leading characters removed.
If used without any argument, it removes the leading whitespaces.

>>> string = "   hello"
>>> string.lstrip()
'hello'
>>> string2 = 'There'
>>> string2.lstrip('the')
'There'
>>> string2.lstrip('The')
're'
>>> string2.lstrip('he')
'There'
>>> string2.lstrip('Te')
'here'
>>> string2.lstrip('Teh')
're'
>>> string2.lstrip('heT')
're'

>>> "saregamapadhanisa".lstrip("tears")
'gamapadhanisa'
>>> "saregamapadhanisa".lstrip("races")
'gamapadhanisa'
>>>

string.rstrip([chars])
Returns a copy of the string with trailing characters removed.
If used without any argument, it removes the trailing whitespaces.

>>> string = "hello   "
>>> string.rstrip()
'hello'
>>> string2 = 'There'
>>> string2.rstrip('ere')
'Th'
>>> string2.rstrip('case')
'Ther'
>>> string2.rstrip('care')
'Th'
>>> string2.rstrip('car')
'There'
>>> 

>>> "saregamapadhanisa".rstrip("tears")
'saregamapadhani'
>>> "saregamapadhanisa".rstrip("races")
'saregamapadhani'












          